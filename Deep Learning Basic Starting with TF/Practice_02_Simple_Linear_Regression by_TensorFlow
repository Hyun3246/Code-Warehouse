{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNZhW2jXk1BVYiRKhd6+EUg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Hyun3246/Code-Warehouse/blob/main/%EC%8B%A4%EC%8A%B5_2_Simple_Linear_Regression%EB%A5%BC_TensorFlow_%EB%A1%9C_%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P1KGXYmQrh3B",
        "outputId": "d4a3667b-ff78-4e02-cc80-1c2a1d0500ca"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf"
      ],
      "metadata": {
        "id": "8lu3DanIri-m"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 데이터 정의\n",
        "x_data = [1, 2, 3, 4, 5]\n",
        "y_data = [1, 2, 3, 4, 5]\n",
        "\n",
        "# 모델 파라미터 정의\n",
        "W = tf.Variable(2.9)\n",
        "b = tf.Variable(0.5)\n",
        "\n",
        "# 가설 함수 정의\n",
        "hypothesis = W * x_data + b"
      ],
      "metadata": {
        "id": "XFVRmes9rvdB"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 비용함수 정의\n",
        "cost = tf.reduce_mean(tf.square(hypothesis - y_data))"
      ],
      "metadata": {
        "id": "n3qhnaAksDdo"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 학습률 정의\n",
        "learning_rate = 0.01\n",
        "\n",
        "# 본격적인 경사하강법\n",
        "for i in range(1000):\n",
        "    with tf.GradientTape() as tape:\n",
        "        hypothesis = W * x_data + b\n",
        "        cost = tf.reduce_mean(tf.square(hypothesis - y_data))\n",
        "\n",
        "    W_grad, b_grad = tape.gradient(cost, [W, b])\n",
        "\n",
        "    W.assign_sub(learning_rate * W_grad)    # 모델 파라미터 업데이트\n",
        "    b.assign_sub(learning_rate * b_grad)    # 모델 파라미터 업데이트\n",
        "\n",
        "    if i % 10 == 0:\n",
        "        print('{:5} | {:10.4} | {:10.4} | {:10.6f}'.format(i, W.numpy(), b.numpy(), cost))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AP_tUaOPsOD6",
        "outputId": "36c16d17-00a2-4eec-baf0-19dec641e7a9"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    0 |      1.005 |   -0.01733 |   0.000055\n",
            "   10 |      1.005 |   -0.01675 |   0.000051\n",
            "   20 |      1.004 |   -0.01619 |   0.000048\n",
            "   30 |      1.004 |   -0.01566 |   0.000045\n",
            "   40 |      1.004 |   -0.01513 |   0.000042\n",
            "   50 |      1.004 |   -0.01463 |   0.000039\n",
            "   60 |      1.004 |   -0.01414 |   0.000037\n",
            "   70 |      1.004 |   -0.01367 |   0.000034\n",
            "   80 |      1.004 |   -0.01322 |   0.000032\n",
            "   90 |      1.004 |   -0.01278 |   0.000030\n",
            "  100 |      1.003 |   -0.01235 |   0.000028\n",
            "  110 |      1.003 |   -0.01194 |   0.000026\n",
            "  120 |      1.003 |   -0.01154 |   0.000024\n",
            "  130 |      1.003 |   -0.01116 |   0.000023\n",
            "  140 |      1.003 |   -0.01079 |   0.000021\n",
            "  150 |      1.003 |   -0.01043 |   0.000020\n",
            "  160 |      1.003 |   -0.01008 |   0.000019\n",
            "  170 |      1.003 |  -0.009744 |   0.000017\n",
            "  180 |      1.003 |   -0.00942 |   0.000016\n",
            "  190 |      1.003 |  -0.009106 |   0.000015\n",
            "  200 |      1.002 |  -0.008803 |   0.000014\n",
            "  210 |      1.002 |   -0.00851 |   0.000013\n",
            "  220 |      1.002 |  -0.008227 |   0.000012\n",
            "  230 |      1.002 |  -0.007953 |   0.000012\n",
            "  240 |      1.002 |  -0.007688 |   0.000011\n",
            "  250 |      1.002 |  -0.007432 |   0.000010\n",
            "  260 |      1.002 |  -0.007184 |   0.000009\n",
            "  270 |      1.002 |  -0.006945 |   0.000009\n",
            "  280 |      1.002 |  -0.006714 |   0.000008\n",
            "  290 |      1.002 |   -0.00649 |   0.000008\n",
            "  300 |      1.002 |  -0.006274 |   0.000007\n",
            "  310 |      1.002 |  -0.006065 |   0.000007\n",
            "  320 |      1.002 |  -0.005863 |   0.000006\n",
            "  330 |      1.002 |  -0.005668 |   0.000006\n",
            "  340 |      1.002 |  -0.005479 |   0.000006\n",
            "  350 |      1.001 |  -0.005297 |   0.000005\n",
            "  360 |      1.001 |  -0.005121 |   0.000005\n",
            "  370 |      1.001 |   -0.00495 |   0.000004\n",
            "  380 |      1.001 |  -0.004785 |   0.000004\n",
            "  390 |      1.001 |  -0.004626 |   0.000004\n",
            "  400 |      1.001 |  -0.004472 |   0.000004\n",
            "  410 |      1.001 |  -0.004323 |   0.000003\n",
            "  420 |      1.001 |  -0.004179 |   0.000003\n",
            "  430 |      1.001 |   -0.00404 |   0.000003\n",
            "  440 |      1.001 |  -0.003906 |   0.000003\n",
            "  450 |      1.001 |  -0.003776 |   0.000003\n",
            "  460 |      1.001 |   -0.00365 |   0.000002\n",
            "  470 |      1.001 |  -0.003528 |   0.000002\n",
            "  480 |      1.001 |  -0.003411 |   0.000002\n",
            "  490 |      1.001 |  -0.003297 |   0.000002\n",
            "  500 |      1.001 |  -0.003188 |   0.000002\n",
            "  510 |      1.001 |  -0.003081 |   0.000002\n",
            "  520 |      1.001 |  -0.002979 |   0.000002\n",
            "  530 |      1.001 |   -0.00288 |   0.000002\n",
            "  540 |      1.001 |  -0.002784 |   0.000001\n",
            "  550 |      1.001 |  -0.002691 |   0.000001\n",
            "  560 |      1.001 |  -0.002602 |   0.000001\n",
            "  570 |      1.001 |  -0.002515 |   0.000001\n",
            "  580 |      1.001 |  -0.002431 |   0.000001\n",
            "  590 |      1.001 |   -0.00235 |   0.000001\n",
            "  600 |      1.001 |  -0.002272 |   0.000001\n",
            "  610 |      1.001 |  -0.002196 |   0.000001\n",
            "  620 |      1.001 |  -0.002123 |   0.000001\n",
            "  630 |      1.001 |  -0.002053 |   0.000001\n",
            "  640 |      1.001 |  -0.001984 |   0.000001\n",
            "  650 |      1.001 |  -0.001918 |   0.000001\n",
            "  660 |      1.001 |  -0.001854 |   0.000001\n",
            "  670 |        1.0 |  -0.001793 |   0.000001\n",
            "  680 |        1.0 |  -0.001733 |   0.000001\n",
            "  690 |        1.0 |  -0.001675 |   0.000001\n",
            "  700 |        1.0 |   -0.00162 |   0.000000\n",
            "  710 |        1.0 |  -0.001566 |   0.000000\n",
            "  720 |        1.0 |  -0.001514 |   0.000000\n",
            "  730 |        1.0 |  -0.001463 |   0.000000\n",
            "  740 |        1.0 |  -0.001415 |   0.000000\n",
            "  750 |        1.0 |  -0.001368 |   0.000000\n",
            "  760 |        1.0 |  -0.001322 |   0.000000\n",
            "  770 |        1.0 |  -0.001278 |   0.000000\n",
            "  780 |        1.0 |  -0.001236 |   0.000000\n",
            "  790 |        1.0 |  -0.001194 |   0.000000\n",
            "  800 |        1.0 |  -0.001155 |   0.000000\n",
            "  810 |        1.0 |  -0.001116 |   0.000000\n",
            "  820 |        1.0 |  -0.001079 |   0.000000\n",
            "  830 |        1.0 |  -0.001043 |   0.000000\n",
            "  840 |        1.0 |  -0.001009 |   0.000000\n",
            "  850 |        1.0 |  -0.000975 |   0.000000\n",
            "  860 |        1.0 | -0.0009425 |   0.000000\n",
            "  870 |        1.0 | -0.0009112 |   0.000000\n",
            "  880 |        1.0 | -0.0008809 |   0.000000\n",
            "  890 |        1.0 | -0.0008516 |   0.000000\n",
            "  900 |        1.0 | -0.0008233 |   0.000000\n",
            "  910 |        1.0 | -0.0007959 |   0.000000\n",
            "  920 |        1.0 | -0.0007694 |   0.000000\n",
            "  930 |        1.0 | -0.0007439 |   0.000000\n",
            "  940 |        1.0 | -0.0007191 |   0.000000\n",
            "  950 |        1.0 | -0.0006951 |   0.000000\n",
            "  960 |        1.0 |  -0.000672 |   0.000000\n",
            "  970 |        1.0 | -0.0006497 |   0.000000\n",
            "  980 |        1.0 | -0.0006282 |   0.000000\n",
            "  990 |        1.0 | -0.0006073 |   0.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(W*5+b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZOYdrcsHtUJo",
        "outputId": "2ea2525f-6f0f-4437-b6ab-955e8b421865"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tf.Tensor(5.0002265, shape=(), dtype=float32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(W*2.5+b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4U3_llEGtgAF",
        "outputId": "2451a9fe-222c-402d-ad63-306f80caedf8"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tf.Tensor(2.4998186, shape=(), dtype=float32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "F1oX-xTutjLW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
